settings:
  name: "<#A0522D>Block Shop"
  size: 19
  auto-restock:
    enabled: true
    period: 24h 10m
  actions:
    on-restock:
      - broadcast{msg=`<gray>Block shop refreshed!`}

shop-gui:
  title:
    - Welcome <white>${player_name} <#FFD700>⭐
    - Welcome <white>${player_name} <#FFD700>⭐⭐
    - Welcome <white>${player_name} <#FFD700>⭐⭐⭐
    - Welcome <white>${player_name} <#FFD700>⭐⭐
  title-update-period: 1s
  # You can fill in HORIZONTAL and VERTICAL
  # horizontal or vertical scrolling
  scroll-mode: VERTICAL
  # The x symbol represents the position where the product icon appears
  structure:
    - "p # d # m # @ # n"
    - "p x x x x x x x n"
    - "p x x x x x x x n"
    - "p # # # c # # # n"
  actions:
    on-open:
      - sound{sound="entity.villager.trade"}
      - message{msg=randomMsg(`<gray>Welcome ${player_name} to <reset>${shop_name}<gray>! What do you want? :)`,
        `<gray>Welcome ${player_name} to <reset>${shop_name}<gray>!`,
        `<gray>Welcome ${player_name} to <reset>${shop_name}<gray>! :)`)};
    on-outside-click:
      - open_gui{id="main-1"}
  icons:
    "#":
      base: brown_stained_glass_pane
      name: " "
      lore:
        - "<dark_gray>Wall"
        - " "
    "@":
      base: clock
      name: "<gray>Restock in：<white>${restock_timer}"
      update-period: 1s
    "p":
      base: red_stained_glass_pane
      name: "<gray>Previous Line"
      actions:
        left:
          - scroll{amount=-1}
      icons:
        - condition: current_line == 0
          icon:
            base: black_stained_glass_pane
    "n":
      base: green_stained_glass_pane
      name: "<gray>Next Line"
      actions:
        left:
          - scroll{amount=1}
      icons:
        - condition: current_line == 3
          icon:
            base: black_stained_glass_pane
    "c":
      base: minecart
      name: " "
      lore:
        - "<dark_gray>✖ <white><key:key.mouse.left>"
        - "   <gray>Open Cart"
        - "<dark_gray>✖ <aqua><key:key.mouse.right>"
        - "   <gray>Switch Shopping mode"
        - "   <gray>Current Mode: <white>${term(shopping_mode_id)}"
        - " "
      actions:
        left:
          - open_cart()
        right:
          - |
            Future.supply(() => switch_shopping_mode())
              .then(() => update_icon())
              .then(() => update_icon{target='d'});
    "d":
      base: paper
      name: " "
      lore:
        - "<dark_gray>✖ <white><key:key.mouse.left>"
        - "   <gray>Buy product from shop"
        - "<dark_gray>✖ <white><key:key.mouse.right>"
        - "   <gray>Sell product to shop"
        - "<dark_gray>✖ <white>Shift + <key:key.mouse.right>"
        - "   <gray>Sell all the product in your inventory to the shop"
        - " "
      icons:
        - condition: shopping_mode_id == "CART"
          icon:
            base: book
            lore:
              - "<dark_gray>✖ <white><key:key.mouse.left>"
              - "   <gray>Add product to cart"
              - "<dark_gray>✖ <white><key:key.mouse.right>"
              - "   <gray>Remove product from shop"
              - "<dark_gray>✖ <white>Drop"
              - "   <gray>Remove all this product from cart"
              - " "
    "m":
      base: chest
      name: "<gray>Shop List"
      lore:
        - " "
        - "<dark_gray>✖ <white>Go to shop list menu"
        - " "
      actions:
        left:
          - open_gui{id="main-1"}
  product-icon:
    icon:
      name: "<dark_gray>Name: <reset>${product_name} <dark_gray>x <white>${product_amount}"
      lore:
        - " "
        - "?`<dark_gray>- <gray>Buy price: <white>${format_decimal(buy_price)}`"
        - "?`<dark_gray>- <gray>Sell price: <white>${format_decimal(sell_price)}`"
        - |
          product_is_stock ? " " : null;
        - "?`<dark_gray>Global stock: <white>${current_global_stock}/${initial_global_stock}`"
        - "?`<dark_gray>Stock per-player: <white>${current_player_stock}/${initial_player_stock}`"
        - |
          bundle_contents_lore && bundle_contents_lore.length() > 0 ? [" ", "<gray>Bundle Contents:"] : null;
        - |
          bundle_contents_lore;
        - |
          desc_lore.length() > 0 ? " " : null;
        - |
          desc_lore;
        - " "
        - "<gray>Rarity: <reset>${product_rarity_name}"
        - " "
      update-period: 0s
      update-on-click: false
      actions:
        left:
          - |
            shopping_mode_id == "CART" ? add_to_cart{amount=1} : sell_to{amount=1};
          - update_icon()
        right:
          - |
            shopping_mode_id == "CART" ? remove_from_cart{amount=1} : buy_from{amount=1};
          - update_icon()
        shift-right:
          - if (shopping_mode_id == "DIRECT") buy_all_from();
          - update_icon()
        drop:
          - if (shopping_mode_id == "CART") remove_all_from_cart();
          - update_icon()
    format:
      bundle-content-line: " <dark_gray>- <reset>${product_name} <gray>x <white>${total_amount}"

products:
  # Use PACK: prefix to import the entire package of products
  - PACK:wools
  - PACK:ores
  - PACK:sculk
