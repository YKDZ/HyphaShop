# Most of the attributes of the products in this package
# are specified by the default-configs, which greatly
# reduces the size of the configuration file and its maintenance difficulty
default-configs:
  item:
    amount: 8 + Random.nextUniform(8, 16)
  context: |
    const buy_range = 0.2;
    const sell_range = 0.3;
  buy-price:
    formula: base * (1 + (Math.random() * 2 - 1) * buy_range) * product_amount
  sell-price:
    formula: base * (1 + (Math.random() * 2 - 1) * sell_range) * product_amount
  stock:
    # All players share this global stock.
    # If the size is set to 10 and player A purchases 2 items, the stock will become 8;
    # Player B sold 2 items, and the stock has increased to 10 (if reset: true)
    global:
      # The initial stock of the product.
      # When players sell or buy goods, stock will fluctuate up and down.
      # If the stock becomes 0, players will not be able to purchase the product
      size: 1024
      # Whether stock be replenished when players sell goods.
      # If false, the stock will only be consumed
      replenish: true
      # Whether the stock be replenished by the player's selling behavior beyond its initial stock size.
      overflow: true
      # Whether stock be reset to its initial size upon restocking
      inherit: true
  rarity: uncommon
  # Can the ItemStack of the product be cached
  # Setting it to true will reduce the performance consumption of the plugin,
  # but it may cause some attribute to fail to refresh dynamically.
  # For example, the random properties of the MMOItems plugin
  # or the Placeholder API variables related to players within the item lore
  cacheable: true

products:
  COAL_ORE:
    item:
      base: coal_ore
    buy-price:
      context: const base = 20
    sell-price:
      context: const base = 10

  COPPER_ORE:
    item:
      base: copper_ore
    buy-price:
      context: const base = 50
    sell-price:
      context: const base = 20

  IRON_ORE:
    item:
      base: iron_ore
    buy-price:
      context: const base = 80
    sell-price:
      context: const base = 30

  LAPIS_ORE:
    item:
      base: lapis_ore
    buy-price:
      context: const base = 110
    sell-price:
      context: const base = 40

  REDSTONE_ORE:
    item:
      base: redstone_ore
    buy-price:
      context: const base = 140
    sell-price:
      context: const base = 50

  EMERALD_ORE:
    item:
      base: emerald_ore
    buy-price:
      context: const base = 170
    sell-price:
      context: const base = 60

  GOLD_ORE:
    item:
      base: gold_ore
    buy-price:
      context: const base = 200
    sell-price:
      context: const base = 70

  DIAMOND_ORE:
    item:
      base: diamond_ore
    buy-price:
      context: const base = 230
    sell-price:
      context: const base = 80
    rarity: epic
